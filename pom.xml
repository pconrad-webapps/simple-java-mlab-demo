<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!-- model version - always 4.0.0 for Maven 2.x POMs -->
  <modelVersion>4.0.0</modelVersion>

  <!-- project coordinates - values which uniquely identify this project -->
  <groupId>edu.ucsb.cs56.pconrad.mlab</groupId>
  <artifactId>mlabdemo</artifactId>
  <name>mlabdemo</name>
  <url>https://github.com/pconrad-webapps/simple-java-mlab-demo</url>

  <!-- configure what mvn package produces -->
  
  <packaging>jar</packaging>
  <version>1.0</version>  

  <!-- what version of Java should we use and what encoding for files? -->
  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.mainClass>edu.ucsb.cs56.pconrad.mlab.mlabdemo.MLabDemo</project.mainClass>
  </properties>

  
  <!-- what other software does our project depend on (third-party JARs, etc.) -->
  <dependencies>

    <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>5.1.2.RELEASE</version>
    </dependency>
    
    <!-- JUnit unit testing (https://junit.org/) -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>[2.8.11.1,)</version>
    </dependency>
    

    <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.4</version>
      <scope>provided</scope>
    </dependency>
    
  </dependencies>

  <build>

    <plugins>

      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-compiler-plugin</artifactId>
	<version>3.8.0</version>
	<configuration>
	  <compilerArgs>
            <arg>-Xlint:deprecation</arg>
            <arg>-Xlint:unchecked</arg>
	  </compilerArgs>
	</configuration>
      </plugin>
      
      <!-- Make jar file executable (produce with `mvn package`)-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <archive>
            <manifest>
              <!-- full package name of class with the main you want to run -->
              <mainClass>${project.mainClass}</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>


      <!-- To enable `mvn exec:java`
	   https://www.mojohaus.org/exec-maven-plugin/usage.html
	   Note that you must type `mvn compile exec:java` to retrigger compilation;
	   `mvn exec:java` by default just runs without trying to recompile.
      -->

      <plugin>
	<groupId>org.codehaus.mojo</groupId>
	<artifactId>exec-maven-plugin</artifactId>
	<version>1.6.0</version>
	<executions>
	  <execution>
	    <goals>
	      <goal>java</goal>
	    </goals>
	  </execution>
	</executions>
	<configuration>
	  <mainClass>${project.mainClass}</mainClass>
	  <arguments>
	    <argument>argument1</argument>
	    ...
	  </arguments>
	  <systemProperties>
	    <systemProperty>
	      <key>myproperty</key>
	      <value>myvalue</value>
	    </systemProperty>
	    ...
	  </systemProperties>
	</configuration>
      </plugin>
      
    </plugins>
  </build>

</project>
